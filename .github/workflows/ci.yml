name: Tests

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files
  Testing:
    needs: Linting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set PY
        run: echo "::set-env name=PY::$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
      - name: Cache PIP
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PY }}
      - name: Cache PEP 582 packages
        uses: actions/cache@v1
        with:
          path: __pypackages__
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-packages-${{ env.PY }}-${{ hashFiles('pdm.lock') }}
      - name: Install editable PDM
        run: |
          pip install wheel
          python setup_dev.py
      - name: Test Unix
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          pdm="__pypackages__/${{ matrix.python-version }}/bin/pdm"
          $pdm run pytest -n auto tests
      - name: Test Windows
        if: matrix.os == 'windows-latest'
        run: |
          Set-Variable -Name pdm -Value "__pypackages__/${{ matrix.python-version }}/Scripts/pdm"
          & $pdm run pytest -n auto tests
